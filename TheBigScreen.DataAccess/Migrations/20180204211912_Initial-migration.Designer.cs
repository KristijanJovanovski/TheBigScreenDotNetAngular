// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TheBigScreen.DataAccess;

namespace TheBigScreen.DataAccess.Migrations
{
    [DbContext(typeof(TheBigScreenDbContext))]
    [Migration("20180204211912_Initial-migration")]
    partial class Initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TheBigScreen.Entities.Entities.BookmarkedMovie", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("MovieId");

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("DateBookmarked");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("bookmarked_movies");
                });

            modelBuilder.Entity("TheBigScreen.Entities.Entities.RatedMovie", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("MovieId");

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("DateRated");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("Rate");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("rated_movies");
                });

            modelBuilder.Entity("TheBigScreen.Entities.Entities.TraktMovie", b =>
                {
                    b.Property<int>("TraktId");

                    b.Property<string>("Certification");

                    b.Property<string>("Homepage");

                    b.Property<string>("ImdbId");

                    b.Property<string>("LanguageCode");

                    b.Property<string>("Overview");

                    b.Property<float?>("Rating");

                    b.Property<DateTime?>("Released");

                    b.Property<int?>("Runtime");

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.Property<string>("Tagline");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("TmdbId");

                    b.Property<string>("Trailer");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Votes");

                    b.Property<int?>("Year");

                    b.HasKey("TraktId");

                    b.ToTable("trakt_movies");
                });

            modelBuilder.Entity("TheBigScreen.Entities.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Avatar")
                        .HasMaxLength(150);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("TheBigScreen.Entities.Entities.WatchedMovie", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("MovieId");

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("DateWatched");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("watched_movies");
                });

            modelBuilder.Entity("TheBigScreen.Entities.Entities.BookmarkedMovie", b =>
                {
                    b.HasOne("TheBigScreen.Entities.Entities.TraktMovie", "Movie")
                        .WithMany("BookmarkedUsers")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheBigScreen.Entities.Entities.User", "User")
                        .WithMany("BookmarkedMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheBigScreen.Entities.Entities.RatedMovie", b =>
                {
                    b.HasOne("TheBigScreen.Entities.Entities.TraktMovie", "Movie")
                        .WithMany("RatedUsers")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheBigScreen.Entities.Entities.User", "User")
                        .WithMany("RatedMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TheBigScreen.Entities.Entities.WatchedMovie", b =>
                {
                    b.HasOne("TheBigScreen.Entities.Entities.TraktMovie", "Movie")
                        .WithMany("WatchedUsers")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TheBigScreen.Entities.Entities.User", "User")
                        .WithMany("WatchedMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
